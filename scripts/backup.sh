#!/bin/bash
# WordPress Production Backup Script
# Creates full backup of WordPress files and database

set -euo pipefail

# Configuration
BACKUP_DIR="/backups"
DATE=$(date +"%Y%m%d_%H%M%S")
BACKUP_NAME="wordpress_backup_${DATE}"
RETENTION_DAYS=30

# Database configuration
DB_HOST="db"
DB_NAME="${WORDPRESS_DB_NAME}"
DB_USER="root"
DB_PASSWORD=$(cat /run/secrets/db_root_password)

# WordPress directory
WP_DIR="/var/www/html"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}" >&2
}

warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

# Create backup directory
mkdir -p "$BACKUP_DIR"

log "Starting WordPress backup: $BACKUP_NAME"

# Create temporary directory for this backup
TEMP_DIR="$BACKUP_DIR/temp_$BACKUP_NAME"
mkdir -p "$TEMP_DIR"

# Function to cleanup on exit
cleanup() {
    if [[ -d "$TEMP_DIR" ]]; then
        rm -rf "$TEMP_DIR"
    fi
}
trap cleanup EXIT

# Backup database
log "Backing up database..."
if mysqldump -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASSWORD" "$DB_NAME" > "$TEMP_DIR/database.sql" 2>/dev/null; then
    log "Database backup completed successfully"
else
    error "Database backup failed"
    exit 1
fi

# Backup WordPress files
log "Backing up WordPress files..."
if tar -czf "$TEMP_DIR/wp-files.tar.gz" -C "$WP_DIR" . 2>/dev/null; then
    log "WordPress files backup completed successfully"
else
    error "WordPress files backup failed"
    exit 1
fi

# Create backup info file
cat > "$TEMP_DIR/backup_info.txt" << EOF
WordPress Backup Information
============================
Backup Date: $(date)
Database Name: $DB_NAME
WordPress Version: $(wp core version --path="$WP_DIR" 2>/dev/null || echo "Unknown")
Backup Components:
  - database.sql (MySQL dump)
  - wp-files.tar.gz (WordPress files)
  - backup_info.txt (This file)

Restore Instructions:
1. Extract wp-files.tar.gz to WordPress directory
2. Import database.sql to MySQL
3. Update wp-config.php with correct database credentials
4. Update site URLs if necessary using WP-CLI or phpMyAdmin

Generated by WordPress Docker Starter backup script
EOF

# Create final backup archive
log "Creating final backup archive..."
cd "$BACKUP_DIR"
if tar -czf "${BACKUP_NAME}.tar.gz" -C temp_"$BACKUP_NAME" . 2>/dev/null; then
    log "Backup archive created: ${BACKUP_NAME}.tar.gz"
else
    error "Failed to create backup archive"
    exit 1
fi

# Calculate backup size
BACKUP_SIZE=$(du -h "${BACKUP_NAME}.tar.gz" | cut -f1)
log "Backup size: $BACKUP_SIZE"

# Remove old backups (older than RETENTION_DAYS)
log "Cleaning up old backups (older than $RETENTION_DAYS days)..."
find "$BACKUP_DIR" -name "wordpress_backup_*.tar.gz" -type f -mtime +$RETENTION_DAYS -delete
REMAINING_BACKUPS=$(find "$BACKUP_DIR" -name "wordpress_backup_*.tar.gz" -type f | wc -l)
log "Remaining backups: $REMAINING_BACKUPS"

# Verify backup integrity
log "Verifying backup integrity..."
if tar -tzf "${BACKUP_NAME}.tar.gz" >/dev/null 2>&1; then
    log "✅ Backup verification successful"
else
    error "❌ Backup verification failed"
    exit 1
fi

log "✅ WordPress backup completed successfully: ${BACKUP_NAME}.tar.gz"

# Optional: Send notification (uncomment and configure as needed)
# curl -X POST -H 'Content-type: application/json' \
#     --data "{\"text\":\"WordPress backup completed: ${BACKUP_NAME}.tar.gz (Size: $BACKUP_SIZE)\"}" \
#     "$SLACK_WEBHOOK_URL" || true

exit 0
